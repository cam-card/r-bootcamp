[
  {
    "objectID": "wk_01.html",
    "href": "wk_01.html",
    "title": "Week 1: Introduction to R",
    "section": "",
    "text": "This week we cover R installation and basics.\n\n\nLink to pre-class survey\nLink to install R\nLink to install R Studio\n\n\n\n\nInstall the following packages into your local R environment:\n\nTidyverse\nggplot2\nreadr\nreadxl\nstringr\n\nSend Cameron an email with what types of stats (t-test, ANOVA, linear regression) you want to learn to do using R.\n\nIf you need help, look at the code we ran in class here."
  },
  {
    "objectID": "wk_01.html#in-class-links",
    "href": "wk_01.html#in-class-links",
    "title": "Week 1: Introduction to R",
    "section": "",
    "text": "Link to pre-class survey\nLink to install R\nLink to install R Studio"
  },
  {
    "objectID": "wk_01.html#activity",
    "href": "wk_01.html#activity",
    "title": "Week 1: Introduction to R",
    "section": "",
    "text": "Install the following packages into your local R environment:\n\nTidyverse\nggplot2\nreadr\nreadxl\nstringr\n\nSend Cameron an email with what types of stats (t-test, ANOVA, linear regression) you want to learn to do using R.\n\nIf you need help, look at the code we ran in class here."
  },
  {
    "objectID": "examples/week_1/classcode_wk1.html",
    "href": "examples/week_1/classcode_wk1.html",
    "title": "Week 1: Class Code",
    "section": "",
    "text": "Making notes:\n\n# This is a note. Adding the # stops R from reading the line as code so you can make notes \n\nQuick math in R:\n\n2 + 2\n\n[1] 4\n\n\nMaking variables:\n\nx &lt;- 2 + 2\ny = 4\n\nx == y\n\n[1] TRUE\n\nmy_name &lt;- \"Cameron\"\nprint(my_name)\n\n[1] \"Cameron\"\n\n\nprinting multiple variables\n\nprint(c(\"My name is\", my_name))\n\n[1] \"My name is\" \"Cameron\"   \n\n\nYou might also need to make a string of variables. For this you will need to use the function c(), where c stands for concatenate. From Merriam-Webster, concatenate: to link together in a series or a chain.\n\nmy_list &lt;- c(1, 2, 3, 4)\nmy_list\n\n[1] 1 2 3 4\n\n#You can also have R fill in numbers in a series for you. \nmy_long_list &lt;- c(1:500)\n\nOnce you have a list, you probably are going to want to access certain parts of it. In R, we do this using variable[location] formatting.\n\nmy_list[2]\n\n[1] 2\n\nmy_long_list[78:146]\n\n [1]  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95  96\n[20]  97  98  99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115\n[39] 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134\n[58] 135 136 137 138 139 140 141 142 143 144 145 146\n\n\nBut most likely, you are going to have a data frame of data. This is how you manually create one.\n\nmy_df &lt;- data.frame(v1 = c(1, 3, 7, 9),\n                       v2 = c(2, 5, 9, 8),\n                       v3 = c(5, 7, 9, 3))\nprint(my_df)\n\n  v1 v2 v3\n1  1  2  5\n2  3  5  7\n3  7  9  9\n4  9  8  3\n\n\nAccessing parts of a dataframe:\nLike using lists, you will often find yourself wanting to access specific parts of your data frame. You can do this using one of the following notation styles.\n\ndf$column_name\ndf[row, column]\ndf[row,] (leave out the row id and it will return the whole row)\ndf[,column] (returns the whole column)\n\n\nmy_df$v1\n\n[1] 1 3 7 9\n\nmy_df[2,3]\n\n[1] 7\n\nmy_df[2,]\n\n  v1 v2 v3\n2  3  5  7\n\nmy_df[,3]\n\n[1] 5 7 9 3\n\n\nFunctions\nA function is a set of R code that has been predefined to do a function for you. In this example, we take the mean of the variable v1 in my_df using the R function “mean.” Then we take the mean again, manually.\n\nmean(my_df$v1)\n\n[1] 5\n\nsum(my_df$v1) / nrow(my_df) \n\n[1] 5\n\n#Maybe not that much more difficult to do it manually, but you would need to know how to use the sum() and nrow() functions. You can imagine that doing larger tasks with a single function can make things a lot easier. \n\nBut, what if I have a function and I don’t know how to use it or what it does?\n\nhelp(mean)\n?mean\n\n# or if you don't remember the name... \n??sum\n\nFunctions\nR has many additional functions that are organized in packages. These can be hosted on CRAN, bioconductR, github, etc. For this bootcamp, you only need to be familiar with CRAN packages. They can be installed using the following code or by clicking packages &gt; install\nNote: to update a package you just re-run the installation code.\n\n#install.packages(\"ggplot2\")"
  },
  {
    "objectID": "examples/week_1/classcode_wk1.html#demo-code",
    "href": "examples/week_1/classcode_wk1.html#demo-code",
    "title": "Week 1: Class Code",
    "section": "",
    "text": "Making notes:\n\n# This is a note. Adding the # stops R from reading the line as code so you can make notes \n\nQuick math in R:\n\n2 + 2\n\n[1] 4\n\n\nMaking variables:\n\nx &lt;- 2 + 2\ny = 4\n\nx == y\n\n[1] TRUE\n\nmy_name &lt;- \"Cameron\"\nprint(my_name)\n\n[1] \"Cameron\"\n\n\nprinting multiple variables\n\nprint(c(\"My name is\", my_name))\n\n[1] \"My name is\" \"Cameron\"   \n\n\nYou might also need to make a string of variables. For this you will need to use the function c(), where c stands for concatenate. From Merriam-Webster, concatenate: to link together in a series or a chain.\n\nmy_list &lt;- c(1, 2, 3, 4)\nmy_list\n\n[1] 1 2 3 4\n\n#You can also have R fill in numbers in a series for you. \nmy_long_list &lt;- c(1:500)\n\nOnce you have a list, you probably are going to want to access certain parts of it. In R, we do this using variable[location] formatting.\n\nmy_list[2]\n\n[1] 2\n\nmy_long_list[78:146]\n\n [1]  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95  96\n[20]  97  98  99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115\n[39] 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134\n[58] 135 136 137 138 139 140 141 142 143 144 145 146\n\n\nBut most likely, you are going to have a data frame of data. This is how you manually create one.\n\nmy_df &lt;- data.frame(v1 = c(1, 3, 7, 9),\n                       v2 = c(2, 5, 9, 8),\n                       v3 = c(5, 7, 9, 3))\nprint(my_df)\n\n  v1 v2 v3\n1  1  2  5\n2  3  5  7\n3  7  9  9\n4  9  8  3\n\n\nAccessing parts of a dataframe:\nLike using lists, you will often find yourself wanting to access specific parts of your data frame. You can do this using one of the following notation styles.\n\ndf$column_name\ndf[row, column]\ndf[row,] (leave out the row id and it will return the whole row)\ndf[,column] (returns the whole column)\n\n\nmy_df$v1\n\n[1] 1 3 7 9\n\nmy_df[2,3]\n\n[1] 7\n\nmy_df[2,]\n\n  v1 v2 v3\n2  3  5  7\n\nmy_df[,3]\n\n[1] 5 7 9 3\n\n\nFunctions\nA function is a set of R code that has been predefined to do a function for you. In this example, we take the mean of the variable v1 in my_df using the R function “mean.” Then we take the mean again, manually.\n\nmean(my_df$v1)\n\n[1] 5\n\nsum(my_df$v1) / nrow(my_df) \n\n[1] 5\n\n#Maybe not that much more difficult to do it manually, but you would need to know how to use the sum() and nrow() functions. You can imagine that doing larger tasks with a single function can make things a lot easier. \n\nBut, what if I have a function and I don’t know how to use it or what it does?\n\nhelp(mean)\n?mean\n\n# or if you don't remember the name... \n??sum\n\nFunctions\nR has many additional functions that are organized in packages. These can be hosted on CRAN, bioconductR, github, etc. For this bootcamp, you only need to be familiar with CRAN packages. They can be installed using the following code or by clicking packages &gt; install\nNote: to update a package you just re-run the installation code.\n\n#install.packages(\"ggplot2\")"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Cameron’s R Bootcamp",
    "section": "",
    "text": "Welcome to Cameron’s R Bootcamp\nYou can find notes, powerpoints, datasets, and even some example code that we will use to learn to code in R.\nYou can use the navi bar to find the current weeks information or go back and find information from previous weeks."
  },
  {
    "objectID": "wk_02.html#using-packages-and-functions-pt-2",
    "href": "wk_02.html#using-packages-and-functions-pt-2",
    "title": "R Bootcamp Week 2: Loading & Manipulating Data",
    "section": "1. Using packages and functions, pt 2",
    "text": "1. Using packages and functions, pt 2\nLast week, we talked briefly about using packages and functions. In week 2, we get a practical demonstration of why packages are used in R.\nHere are some quick definitions:\n\nPackage: A collection of R functions that usually complete similar tasks or can be used together to accomplish a goal. This correlation is not a requirement, though.\nFunction: A function is a set of written code that accomplishes a task. For example, calculating the mean or SD, reading data into R, or saving your manipulated dataset as a CSV file.\n\nBefore using a function in R, you need to load its package:\n\n# loading the dplyr package in R\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n# OR (nto as a comment....)\n#dplyr::select()\n\nAlternatively, you can reference a function without loading the full package by using the package::function() notation. For example, say you want to use the function “select()” from the package “dplyr” without loading the full package. You can use dplyr::select().\nRemember, to get help with using a function, you can reference it’s help file. Here’s an example finding the help file for the mean function:\n\n?mean\n\nUnder most circumstances, you are wanting to supply some type of information to the function. This called an argument. So think package::function(argument) or function(argument). An argument might be data or an option you need to specify. Sometimes arguments will have a default option selected. The functions help file probably gives you specifics on the defaults and what arguments are available/what they do.\nFunctions work from inside the deepest set of parenthesis outward. For example if you ran bake(combine_ingredients()), R would combine ingredients first then bake."
  },
  {
    "objectID": "wk_02.html#r-has-built-in-data-sets-for-practice",
    "href": "wk_02.html#r-has-built-in-data-sets-for-practice",
    "title": "R Bootcamp Week 2: Loading & Manipulating Data",
    "section": "2. R has built in data sets for practice",
    "text": "2. R has built in data sets for practice\nThis week we will use 2 of R’s built in data sets: ChickWeight and palmer penguins.\nHere’s some example code for working with R’s built in data sets:\n\n# load data into R with data() \ndata(\"ChickWeight\")\n\n\n# you can pick a different name for your dataframe, \n# though. Just assign it like any other variable. \n\nchicken &lt;- ChickWeight\n\nYou can also get more information about R’s built in data sets similarly to how you would get more information about a function or package!\n\n?ChickWeight"
  },
  {
    "objectID": "wk_02.html#working-with-data-using-tidyverse",
    "href": "wk_02.html#working-with-data-using-tidyverse",
    "title": "R Bootcamp Week 2: Loading & Manipulating Data",
    "section": "3. Working with Data using Tidyverse",
    "text": "3. Working with Data using Tidyverse\nAlthough base R has functions to do everything available in the tidyverse, but the tidyverse especially packages like dplyr, tidyr, and magrittr have become very common. I prefer using them because they are a lot easier to use, especially in sequence, and they are easier to read.\n\nDplyr\nA list of common dplyr functions:\n\n\n\n\n\n\n\nfunction()\nuse case\n\n\n\n\nselect()\n“select” certain column of a dataframe\n\n\nfilter()\n“filter” a dataframe keeping rows that match a certain criteria\n\n\narrange()\n“arrange” the dataframe / sort by a certain column\n\n\nmutate()\n“mutate” the dataframe by adding another column/variable\n\n\ngroup_by()\n“group by” a certain column for summary statistics\n\n\nsummarise()\n“summarise” after grouping to get summary statistics\n\n\n\n\n\nMagrittr\nMagrittr allows you to pipe. I would recommend visiting the magrittr description file for a summary of what it does. Essentially, it allows you to chain functions together using the pipe operator (%&gt;%), placing the output of one function into the first argument of the next. This works especially well with dplyr.\nNote: Loading the dplyr packages enables the basic magrittr forward pipe, but if you’re interested, there are other piping methods in this package.\nHere’s an example calculating the mean weight for all chicks in the ChickWeight data set:\n\ndata(\"ChickWeight\")\nmean(ChickWeight$weight)\n\n[1] 121.8183\n\n# OR PIPE: \nlibrary(magrittr)\nChickWeight$weight %&gt;% mean()\n\n[1] 121.8183\n\n\nLook at the following example where I complete the following tasks with and with out piping:\n\nkeep only data points where weight is greater than 100\nkeep only data points where time is 12\nselect the weight, time, and diet columns\ncalculate the mean, grouping by Diet and Time\nArrange the data set by the calculated mean from lowest to highest.\n\nOption 1: Create loads of variables or save over the same variables multiple times\n\n# example without pipe, creating variables  \ndata(ChickWeight) # loading up some data\n\nchwt_filtered1 &lt;- filter(ChickWeight, weight &gt; 100)\nchwt_filtered2 &lt;- filter(chwt_filtered1, Time == 12)\nchwt_selected &lt;- select(chwt_filtered2, weight, Time, Diet)\nchwt_grouped  &lt;- group_by(chwt_selected, Diet, Time)\nchwt_summary  &lt;- summarise(chwt_grouped, mean = mean(weight))\n\n`summarise()` has grouped output by 'Diet'. You can override using the\n`.groups` argument.\n\nchwt_clean    &lt;- arrange(chwt_summary, -mean)\n\nprint(chwt_clean)\n\n# A tibble: 4 × 3\n# Groups:   Diet [4]\n  Diet   Time  mean\n  &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 4        12  151.\n2 3        12  144.\n3 2        12  138.\n4 1        12  130.\n\n\nOption 2: Nested functions. This doesn’t create multiple variables but it sure is difficult to read!\n\n# example without pipe \ndata(ChickWeight) # loading up some data\n\nchwt_clean &lt;- arrange(\n  summarise(\n    group_by(\n      select(\n        filter(\n          filter(ChickWeight, weight &gt; 100),\n          Time == 12\n        ),\n        weight, Time, Diet\n      ),\n      Diet, Time\n    ),\n    mean = mean(weight)\n  ),\n  -mean\n)\n\n`summarise()` has grouped output by 'Diet'. You can override using the\n`.groups` argument.\n\nprint(chwt_clean)\n\n# A tibble: 4 × 3\n# Groups:   Diet [4]\n  Diet   Time  mean\n  &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 4        12  151.\n2 3        12  144.\n3 2        12  138.\n4 1        12  130.\n\n\nOption 3: Using pipes. Look how clean and easy to read/follow this is.\n\n# first load dplyr\nlibrary(dplyr)\n\ndata(ChickWeight) # loading up some data\n\n# example with pipe \nchwt_clean &lt;- ChickWeight %&gt;% \n  filter(weight &gt; 100) %&gt;% \n  filter(Time == 12) %&gt;% \n  select(weight, Time, Diet) %&gt;% \n  group_by(Diet, Time) %&gt;% \n  summarise(mean = mean(weight)) %&gt;%\n  arrange(-mean)\n\n`summarise()` has grouped output by 'Diet'. You can override using the\n`.groups` argument.\n\nprint(chwt_clean)\n\n# A tibble: 4 × 3\n# Groups:   Diet [4]\n  Diet   Time  mean\n  &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 4        12  151.\n2 3        12  144.\n3 2        12  138.\n4 1        12  130.\n\n#you can also pipe into a single function for example: chwt_clean %&gt;% print()"
  },
  {
    "objectID": "wk_02.html#activityhomework",
    "href": "wk_02.html#activityhomework",
    "title": "R Bootcamp Week 2: Loading & Manipulating Data",
    "section": "Activity/Homework:",
    "text": "Activity/Homework:\n\nInstall the palmerpenguins package\nLoad the dataset penguins_raw into R.\nLook at the information for the data set.\nWhat is information is stored in the variable bill_dep?\nWhat 3 datasources were used to develop this dataset?\nTrim the dataset so that you only have the following variables: Species, Island, xStage, Date Egg, Flipper Length, Culment Depth, Culmen Length and Sex.\nInspect the formatting using head()\nCalculate the summary statistics grouping by Island and species"
  }
]